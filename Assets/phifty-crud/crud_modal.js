// Generated by CoffeeScript 1.9.3
(function() {
  var ControlBuilder;

  window.CRUDModal = {};

  ControlBuilder = {
    primaryButtonClass: "btn btn-primary btn-success"
  };

  ControlBuilder.createButton = function(label, config) {
    var btn;
    btn = document.createElement('button');
    btn.innerText = label;
    btn.className = this.primaryButtonClass;
    return btn;
  };


  /*
  
  Create a bootstrap modal with the ajax content.
  
  title (string): title of the modal
  side (boolean): if it's a side modal
  size (string): size of the modal, css class name
  id (integer): the record id.
  url (string):  the url of ajax content
  controls (array): the config for creating controls
   */

  CRUDModal.open = function(config, modalConfig) {
    var ajaxConfig, defaultControls, ui;
    defaultControls = [
      {
        label: '儲存',
        primary: true,
        onClick: function(e, ui) {
          return ui.body.find("form").submit();
        }
      }
    ];
    ajaxConfig = {
      url: config.url,
      args: {
        _submit_btn: false,
        _close_btn: false,
        id: config.id
      }
    };
    ui = ModalManager.create({
      title: config.title || "Untitled",
      side: config.side || false,
      size: config.size,
      ajax: ajaxConfig,
      controls: config.controls || defaultControls
    });
    ui.dialog.on("dialog.ajax.done", function(e, ui) {
      var $result, a, form, scrollTimer;
      form = ui.body.find("form").get(0);
      $result = $('<div/>').addClass('action-result-container');
      $(form).before($result);
      scrollTimer = null;
      $(ui.body).scroll(function(e) {
        if (scrollTimer) {
          clearTimeout(scrollTimer);
        }
        return scrollTimer = setTimeout((function() {
          return $result.css({
            top: ui.body.get(0).scrollTop
          });
        }), 100);
      });
      a = Action.form(form, {
        status: true,
        clear: true,
        onSuccess: function(resp) {
          return setTimeout((function() {
            return ui.dialog.foldableModal('close');
          }), 1000);
        }
      });
      a.plug(ActionBootstrapHighlight, {});
      return a.plug(ActionMsgbox, {
        container: $result,
        fadeOut: false
      });
    });
    ui.dialog.foldableModal(modalConfig || 'show');
    return ui;
  };


  /*
  
  CRUDModal.openFromBtn depends on data attributes:
  
  - data-modal-title: modal title
  - data-modal-side: display as a side modal?
  - data-modal-size: modal size size
  - data-edit-url: the url of the content to be embedded.
  
  This method reads the attributes from button element and open the CRUD form in
  a modal.
  
  modalConfig will be used when you need to define modal options.
   */

  CRUDModal.openFromBtn = function($btn, modalConfig) {
    var id, side, size, title;
    id = $btn.data("record-id");
    title = $btn.data("modal-title");
    size = $btn.data("modal-size");
    side = $btn.data("modal-side");
    return CRUDModal.open({
      "id": id,
      "title": title,
      "size": size,
      "side": side,
      "url": $btn.data("edit-url")
    });
  };

}).call(this);
